#!/bin/bash

# This file is part of luax-releases.
#
# luax-releases is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# luax-releases is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with luax-releases.  If not, see <https://www.gnu.org/licenses/>.
#
# For further information about luax-releases you can visit
# https://github.com/CDSoft/luax-releases

set -eu

export PREFIX=$PWD/local
DATE=$(date +%Y-%m-%d)
RELEASE=$PWD/luax-release/$DATE

TARGETS=(
    lua
    linux-x86_64
    linux-x86_64-musl
    linux-aarch64
    linux-aarch64-musl
    macos-x86_64
    macos-aarch64
    windows-x86_64
    windows-aarch64
)

all()
{
    for target in "${TARGETS[@]}"
    do
        "$@" "$target"
    done
}

all_parallel()
{
    for target in "${TARGETS[@]}"
    do
        "$@" "$target" &
    done
    wait
}

gitclone()
{
    local URL="$1"
    local DEST="${2:-$(basename "$URL")}"
    if [ -d "$DEST" ]
    then
        ( cd "$DEST" && git pull )
    else
        git clone "$URL" "$DEST"
    fi
}

download()
{
    local DEST="$1"
    local URL="$2"
    local NAME
    NAME="$DEST/$(basename "$URL")"
    test -f "$NAME" && return
    mkdir -p "$DEST"
    echo "Download $NAME"
    curl -sSLf "$URL" -o "$NAME"
}

mkdir -p "$PREFIX"

#####################################################################
# Ninja
#####################################################################

gitclone https://github.com/cdsoft/ninja-builder
( cd ninja-builder && ./ninja-builder.sh zig install )

NINJA_RELEASE=$(grep RELEASE ninja-builder/ninja-builder.sh | head -1 | sed 's/.*=//')
NINJA_VERSION=$(grep NINJA_VERSION ninja-builder/ninja-builder.sh | head -1 | sed 's/.*=//')
NINJA_ZIG_VERSION=$(grep ZIG_VERSION ninja-builder/ninja-builder.sh | head -1 | sed 's/.*=//')

copy_ninja()
{
    local ARCH="$1"
    test "$ARCH" = lua && return
    local SRC=ninja-builder/.build/ninja-${NINJA_VERSION}-zig-${NINJA_ZIG_VERSION}/ninja-build-${NINJA_RELEASE}-${ARCH}
    local DST=$RELEASE/luax-${DATE}-${ARCH}/bin
    mkdir -p "$DST"
    cp -v "$SRC/ninja"* "$DST/"
}

all copy_ninja

#####################################################################
# LuaX release
#####################################################################

gitclone https://github.com/cdsoft/luax
( cd luax && ./bootstrap.sh release fast ssl )

LUAX_VERSION=$(cd luax && git describe --tags)

add()
{
    local NAME="$1"
    local VERSION="$2"
    local ARCH="$3"
    mkdir -p  "$RELEASE/luax-$DATE-$ARCH"
    tar xaf "$NAME/.build/release/$VERSION/$NAME-$VERSION-$ARCH.tar.gz" -C "$RELEASE/luax-$DATE-$ARCH" --strip-components=1 --sort=name
}

all_parallel add luax "$LUAX_VERSION"

# LuaX cross-compilers to build other LuaX softwares

( cd luax && ./bootstrap.sh cross nossl small -b .build/cross -o .build/cross/build.ninja && ninja -f .build/cross/build.ninja install )

luax-cross-env()
{
    eval "$(luax/.build/cross/bin/luax env)"
}

#( cd luax && ./bootstrap.sh cross ssl small -b .build/cross-ssl -o .build/cross-ssl/build.ninja )
#
#luax-cross-ssl-env()
#{
#    eval "$(luax-cross/.build/cross-ssl/bin/luax env)"
#}

#####################################################################
# bang release
#####################################################################

gitclone https://github.com/cdsoft/bang
luax-cross-env
( cd bang && ./boot.lua && ninja release && ninja install )

BANG_VERSION=$(cd bang && git describe --tags)

all add bang "$BANG_VERSION"

#####################################################################
# ypp release
#####################################################################

gitclone https://github.com/cdsoft/ypp
luax-cross-env
( cd ypp && bang && ninja release && ninja install )

YPP_VERSION=$(cd ypp && git describe --tags)

all add ypp "$YPP_VERSION"

#####################################################################
# panda release
#####################################################################

gitclone https://github.com/cdsoft/panda
luax-cross-env
( cd panda && bang && ninja release && ninja install )

add_panda()
{
    local NAME="$1"
    local VERSION="$2"
    local ARCH="$3"
    tar xaf "$NAME/.build/release/$VERSION/$NAME-$VERSION.tar.gz" -C "$RELEASE/luax-$DATE-$ARCH" --strip-components=1 --sort=name
}

PANDA_VERSION=$(cd panda && git describe --tags)

all add_panda panda "$PANDA_VERSION"

#####################################################################
# lsvg release
#####################################################################

gitclone https://github.com/cdsoft/lsvg
luax-cross-env
( cd lsvg && bang && ninja release && ninja install )

LSVG_VERSION=$(cd lsvg && git describe --tags)

all add lsvg "$LSVG_VERSION"

#####################################################################
# ICD release
#####################################################################

gitclone https://github.com/cdsoft/icd
luax-cross-env
( cd icd && bang && ninja release && ninja install )

ICD_VERSION=$(cd icd && git describe --tags)

all add icd "$ICD_VERSION"

#####################################################################
# tagref release
#####################################################################

gitclone https://github.com/cdsoft/tagref
luax-cross-env
( cd tagref && bang && ninja release && ninja install )

TAGREF_VERSION=$(cd tagref && git describe --tags)

all add tagref "$TAGREF_VERSION"

#####################################################################
# calculadoira release
#####################################################################

gitclone https://github.com/cdsoft/calculadoira
luax-cross-env
( cd calculadoira && bang && ninja release && ninja install )

CALCULADOIRA_VERSION=$(cd calculadoira && git describe --tags)

all add calculadoira "$CALCULADOIRA_VERSION"

#####################################################################
# lz4
#####################################################################

gitclone https://github.com/cdsoft/lz4-builder
( cd lz4-builder && bang && ninja all install )

LZ4_RELEASE=$(grep release lz4-builder/build.lua | head -1 | awk '{print $3}' | tr -d '"')
LZ4_VERSION=$(grep lz4_version lz4-builder/build.lua | head -1 | awk '{print $3}' | tr -d '"')

copy_lz4()
{
    local ARCH="$1"
    test "$ARCH" = lua && return
    local SRC=lz4-builder/.build/lz4-build-${LZ4_RELEASE}-${ARCH}.tar.gz
    local DST=$RELEASE/lz4-${DATE}-${ARCH}/bin
    mkdir -p "$DST"
    tar xaf "$SRC" -C "$DST"
}

all copy_lz4

#####################################################################
# lzip
#####################################################################

gitclone https://github.com/cdsoft/lzip-builder
( cd lzip-builder && bang && ninja all install )

LZIP_RELEASE=$(grep release lzip-builder/build.lua | head -1 | awk '{print $3}' | tr -d '"')
LZIP_VERSION=$(grep lzip_version lzip-builder/build.lua | head -1 | awk '{print $3}' | tr -d '"')

copy_lzip()
{
    local ARCH="$1"
    test "$ARCH" = lua && return
    local SRC=lzip-builder/.build/lzip-build-${LZIP_RELEASE}-${ARCH}.tar.gz
    local DST=$RELEASE/lzip-${DATE}-${ARCH}/bin
    mkdir -p "$DST"
    tar xaf "$SRC" -C "$DST"
}

all copy_lzip

#####################################################################
# Pandoc
#####################################################################

PANDOC_URL=https://github.com/jgm/pandoc/releases
PANDOC_VERSION=$(basename "$(curl -Ls -o /dev/null -w "%{url_effective}" $PANDOC_URL/latest)")

mkdir -p "$RELEASE/pandoc-$DATE"-{linux-x86_64,linux-aarch64,macos-x86_64,macos-aarch64,windows-x86_64}/bin

download "pandoc/${PANDOC_VERSION}" "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-linux-amd64.tar.gz" &
download "pandoc/${PANDOC_VERSION}" "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-linux-arm64.tar.gz" &
download "pandoc/${PANDOC_VERSION}" "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-x86_64-macOS.zip" &
download "pandoc/${PANDOC_VERSION}" "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-arm64-macOS.zip" &
download "pandoc/${PANDOC_VERSION}" "https://github.com/jgm/pandoc/releases/download/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-windows-x86_64.zip" &
wait

tar -xaf "pandoc/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-linux-amd64.tar.gz" -C "$RELEASE/pandoc-$DATE-linux-x86_64" --strip-components=1 --sort=name "*/bin/*" &
tar -xaf "pandoc/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-linux-arm64.tar.gz" -C "$RELEASE/pandoc-$DATE-linux-aarch64" --strip-components=1 --sort=name "*/bin/*" &
unzip -jo "pandoc/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-x86_64-macOS.zip" "*/bin/*" -d "$RELEASE/pandoc-$DATE-macos-x86_64/bin" &
unzip -jo "pandoc/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-arm64-macOS.zip" "*/bin/*" -d "$RELEASE/pandoc-$DATE-macos-aarch64/bin" &
unzip -jo "pandoc/${PANDOC_VERSION}/pandoc-${PANDOC_VERSION}-windows-x86_64.zip" "*/pandoc.exe" -d "$RELEASE/pandoc-$DATE-windows-x86_64/bin" &
wait

fd . "$RELEASE" -e exe -x chmod +x

#####################################################################
# Typst
#####################################################################

TYPST_URL=https://github.com/typst/typst/releases
TYPST_VERSION=$(basename "$(curl -Ls -o /dev/null -w "%{url_effective}" $TYPST_URL/latest)")
TYPST_VERSION=${TYPST_VERSION/v/}

mkdir -p "$RELEASE/typst-$DATE"-{linux-x86_64,linux-aarch64,macos-x86_64,macos-aarch64,windows-x86_64,windows-aarch64}/bin

download "typst/${TYPST_VERSION}" "https://github.com/typst/typst/releases/download/v${TYPST_VERSION}/typst-x86_64-unknown-linux-musl.tar.xz" &
download "typst/${TYPST_VERSION}" "https://github.com/typst/typst/releases/download/v${TYPST_VERSION}/typst-aarch64-unknown-linux-musl.tar.xz" &
download "typst/${TYPST_VERSION}" "https://github.com/typst/typst/releases/download/v${TYPST_VERSION}/typst-x86_64-apple-darwin.tar.xz" &
download "typst/${TYPST_VERSION}" "https://github.com/typst/typst/releases/download/v${TYPST_VERSION}/typst-aarch64-apple-darwin.tar.xz" &
download "typst/${TYPST_VERSION}" "https://github.com/typst/typst/releases/download/v${TYPST_VERSION}/typst-x86_64-pc-windows-msvc.zip" &
download "typst/${TYPST_VERSION}" "https://github.com/typst/typst/releases/download/v${TYPST_VERSION}/typst-aarch64-pc-windows-msvc.zip" &
wait

tar -xaf "typst/${TYPST_VERSION}/typst-x86_64-unknown-linux-musl.tar.xz" -C "$RELEASE/typst-$DATE-linux-x86_64/bin" --strip-components=1 --sort=name "*/typst" &
tar -xaf "typst/${TYPST_VERSION}/typst-aarch64-unknown-linux-musl.tar.xz" -C "$RELEASE/typst-$DATE-linux-aarch64/bin" --strip-components=1 --sort=name "*/typst" &
tar -xaf "typst/${TYPST_VERSION}/typst-x86_64-apple-darwin.tar.xz" -C "$RELEASE/typst-$DATE-macos-x86_64/bin" --strip-components=1 --sort=name "*/typst" &
tar -xaf "typst/${TYPST_VERSION}/typst-aarch64-apple-darwin.tar.xz" -C "$RELEASE/typst-$DATE-macos-aarch64/bin" --strip-components=1 --sort=name "*/typst" &
unzip -jo "typst/${TYPST_VERSION}/typst-x86_64-pc-windows-msvc.zip" "*/typst.exe" -d "$RELEASE/typst-$DATE-windows-x86_64/bin" &
unzip -jo "typst/${TYPST_VERSION}/typst-aarch64-pc-windows-msvc.zip" "*/typst.exe" -d "$RELEASE/typst-$DATE-windows-aarch64/bin" &
wait

fd . "$RELEASE" -e exe -x chmod +x

#####################################################################
# PlantUML
#####################################################################

PLANTUML_URL=https://github.com/plantuml/plantuml/releases
PLANTUML_VERSION=$(basename "$(curl -Ls -o /dev/null -w "%{url_effective}" $PLANTUML_URL/latest)")
PLANTUML_VERSION=${PLANTUML_VERSION/v/}

mkdir -p "$RELEASE/plantuml-$DATE/bin"

download "plantuml/${PLANTUML_VERSION}" "https://github.com/plantuml/plantuml/releases/download/v${PLANTUML_VERSION}/plantuml-${PLANTUML_VERSION}.jar"

cp "plantuml/${PLANTUML_VERSION}/plantuml-${PLANTUML_VERSION}.jar" "$RELEASE/plantuml-$DATE/bin/plantuml.jar"

#####################################################################
# ditaa
#####################################################################

DITAA_URL=https://github.com/stathissideris/ditaa/releases
DITAA_VERSION=$(basename "$(curl -Ls -o /dev/null -w "%{url_effective}" $DITAA_URL/latest)")
DITAA_VERSION=${DITAA_VERSION/v/}

mkdir -p "$RELEASE/ditaa-$DATE/bin"

download "ditaa/${DITAA_VERSION}" "https://github.com/stathissideris/ditaa/releases/download/v${DITAA_VERSION}/ditaa-${DITAA_VERSION}-standalone.jar"
cp "ditaa/${DITAA_VERSION}/ditaa-${DITAA_VERSION}-standalone.jar" "$RELEASE/ditaa-$DATE/bin/ditaa.jar"

#####################################################################
# Archives
#####################################################################

archive()
{
    local ARCH="$1"
    echo "Create $RELEASE/luax-$DATE-$ARCH.tar.xz"
    tar -caf "$RELEASE/luax-$DATE-$ARCH.tar.xz" -C "$RELEASE" "luax-$DATE-$ARCH" --sort=name
}

all_parallel archive

archive_third_party()
{
    local SOFT="$1"
    local ARCH="$2"
    echo "Create $RELEASE/$SOFT-$DATE-$ARCH.tar.xz"
    tar -caf "$RELEASE/$SOFT-$DATE-$ARCH.tar.xz" -C "$RELEASE" "$SOFT-$DATE-$ARCH" --sort=name
}

archive_generic()
{
    local SOFT="$1"
    echo "Create $RELEASE/$SOFT-$DATE.tar.xz"
    tar -caf "$RELEASE/$SOFT-$DATE.tar.xz" -C "$RELEASE" "$SOFT-$DATE" --sort=name
}

archive_third_party lzip linux-x86_64 &
archive_third_party lzip linux-x86_64-musl &
archive_third_party lzip linux-aarch64 &
archive_third_party lzip linux-aarch64-musl &
archive_third_party lzip macos-x86_64 &
archive_third_party lzip macos-aarch64 &
archive_third_party lzip windows-x86_64 &
archive_third_party lzip windows-aarch64 &
wait

archive_third_party lz4 linux-x86_64 &
archive_third_party lz4 linux-x86_64-musl &
archive_third_party lz4 linux-aarch64 &
archive_third_party lz4 linux-aarch64-musl &
archive_third_party lz4 macos-x86_64 &
archive_third_party lz4 macos-aarch64 &
archive_third_party lz4 windows-x86_64 &
archive_third_party lz4 windows-aarch64 &
wait

archive_third_party pandoc linux-x86_64 &
archive_third_party pandoc linux-aarch64 &
archive_third_party pandoc macos-x86_64 &
archive_third_party pandoc macos-aarch64 &
archive_third_party pandoc windows-x86_64 &
wait

archive_third_party typst linux-x86_64 &
archive_third_party typst linux-aarch64 &
archive_third_party typst macos-x86_64 &
archive_third_party typst macos-aarch64 &
archive_third_party typst windows-x86_64 &
archive_third_party typst windows-aarch64 &
wait

archive_generic plantuml &
archive_generic ditaa &
wait

cat <<EOF | pandoc --to gfm > "$RELEASE/README.md"
# LuaX and friends binary release - $DATE

## LuaX and friends

| Project       | Version                                                                                               | Sources                                                       |
| ------------- | ----------------------------------------------------------------------------------------------------- | ------------------------------------------------------------- |
| LuaX          | [$LUAX_VERSION](https://github.com/CDSoft/luax/releases/tag/$LUAX_VERSION)                            | [CDSoft/luax](https://github.com/CDSoft/luax)                 |
| bang          | [$BANG_VERSION](https://github.com/CDSoft/bang/releases/tag/$BANG_VERSION)                            | [CDSoft/bang](https://github.com/CDSoft/bang)                 |
| ypp           | [$YPP_VERSION](https://github.com/CDSoft/ypp/releases/tag/$YPP_VERSION)                               | [CDSoft/ypp](https://github.com/CDSoft/ypp)                   |
| panda         | [$PANDA_VERSION](https://github.com/CDSoft/panda/releases/tag/$PANDA_VERSION)                         | [CDSoft/panda](https://github.com/CDSoft/panda)               |
| lsvg          | [$LSVG_VERSION](https://github.com/CDSoft/lsvg/releases/tag/$LSVG_VERSION)                            | [CDSoft/lsvg](https://github.com/CDSoft/lsvg)                 |
| icd           | [$ICD_VERSION](https://github.com/CDSoft/icd/releases/tag/$ICD_VERSION)                               | [CDSoft/icd](https://github.com/CDSoft/icd)                   |
| tagref        | [$TAGREF_VERSION](https://github.com/CDSoft/tagref/releases/tag/$TAGREF_VERSION)                      | [CDSoft/tagref](https://github.com/CDSoft/tagref)             |
| calculadoira  | [$CALCULADOIRA_VERSION](https://github.com/CDSoft/calculadoira/releases/tag/$CALCULADOIRA_VERSION)    | [CDSoft/calculadoira](https://github.com/CDSoft/calculadoira) |

## Third party softwares

| Project       | Version                                                                                               | Documentation                                                     |
| ------------- | ----------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |
| Ninja         | [$NINJA_VERSION](https://github.com/ninja-build/ninja/releases/tag/v$NINJA_VERSION)                   | [ninja-build.org](https://ninja-build.org)                        |
| Lzip          | [$LZIP_VERSION](https://download.savannah.gnu.org/releases/lzip)                                      | [lzip.nongnu.org](https://lzip.nongnu.org)                        |
| LZ4           | [$LZ4_VERSION](https://github.com/lz4/lz4/releases/tag/v$LZ4_VERSION)                                 | [lz4.org](https://lz4.org)                                        |
| Pandoc        | [$PANDOC_VERSION](https://github.com/jgm/pandoc/releases/tag/$PANDOC_VERSION)                         | [pandoc.org](https://pandoc.org)                                  |
| Typst         | [$TYPST_VERSION](https://github.com/typst/typst/releases/tag/v$TYPST_VERSION)                         | [typst.app](https://typst.app)                                    |
| PlantUML      | [$PLANTUML_VERSION](https://github.com/plantuml/plantuml/releases/tag/v$PLANTUML_VERSION)             | [plantuml.com](https://plantuml.com)                              |
| ditaa         | [$DITAA_VERSION](https://github.com/stathissideris/ditaa/releases/tag/v$DITAA_VERSION)                | [stathissideris/ditaa](https://github.com/stathissideris/ditaa)   |
EOF
